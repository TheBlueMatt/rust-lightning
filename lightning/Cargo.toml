[package]
name = "lightning"
version = "0.0.10"
authors = ["Matt Corallo"]
license = "Apache-2.0"
repository = "https://github.com/rust-bitcoin/rust-lightning/"
description = """
A Bitcoin Lightning library in Rust.
Does most of the hard work, without implying a specific runtime, requiring clients implement basic network logic, chain interactions and disk storage.
Still missing tons of error-handling. See GitHub issues for suggested projects if you want to contribute. Don't have to bother telling you not to use this for anything serious, because you'd have to build a client around it to even try.
"""

[lib]
crate-type = ["cdylib", "rlib"]

[features]
# Supports tracking channels with a non-bitcoin chain hashes. Currently enables all kinds of fun DoS attacks.
non_bitcoin_chain_hash_routing = []
fuzztarget = ["secp256k1/fuzztarget", "bitcoin/fuzztarget", "bitcoin_hashes/fuzztarget"]
# Unlog messages superior at targeted level.
max_level_off = []
max_level_error = []
max_level_warn = []
max_level_info = []
max_level_debug = []

[dependencies]
bitcoin = "0.21"
bitcoin_hashes = "0.7"
secp256k1 = "0.15"

# Building libbitcoinconsensus in wasm32 requires a stdlibc, which is...complicated
# Instead, just skip the script verification runs in wasm test runs.
# Note that due to a long-standing bug only recently fixed in an RFC on nightly, this
# workaround requires building with cargo nightly -Z features=itarget. See
# tracking issue https://github.com/rust-lang/cargo/issues/7914 and
# https://github.com/rust-lang/cargo/issues/1197.
[target.'cfg(not(target_arch = "wasm32"))'.dev-dependencies.bitcoin]
version = "0.21"
features = ["bitcoinconsensus"]

[dev-dependencies]
hex = "0.3"
rand = "0.4"
